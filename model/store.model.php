<?phpdefined('haipinlegou') or exit('Access Invalid!');class storeModel extends Model {    public function __construct(){        parent::__construct('store');    }    public function createStore($param) {        if(empty($param)) {            return false;        }        $shop_array		= array();        $shop_array['grade_id']		= intval($param['grade_id']);        $shop_array['store_owner_card']	= trim($param['store_owner_card']);        $shop_array['store_name']	= trim($param['store_name']);        $shop_array['member_id']	= $_SESSION['member_id'];        $shop_array['member_name']	= $_SESSION['member_name'];        $shop_array['sc_id']		= intval($param['sc_id']);        $shop_array['area_id']		= trim($param['area_id']);        $shop_array['area_info']	= trim($param['area_info']);        $shop_array['store_address']= trim($param['store_address']);        $shop_array['store_zip']	= trim($param['store_zip']);        $shop_array['store_tel']	= trim($param['store_tel']);        $shop_array['store_zy']		= trim($param['store_zy']);        $shop_array['name_auth']	= intval($param['name_auth']);        $shop_array['store_auth']	= intval($param['store_auth']);        $shop_array['store_image']	= trim($param['store_image']);        $shop_array['store_image1']	= trim($param['store_image1']);        $shop_array['store_state']	= intval($param['store_state']);        $shop_array['store_time']	= time();        $result	= Db::insert('store',$shop_array);        if ($result) {            Db::update('member',array('store_id'=>$result),"WHERE member_id='{$_SESSION['member_id']}'");            return $result;        } else {            return false;        }    }    public function setStore($param) {        if (empty($param)){            return false;        }        $tmp = array(            'store_name'=>$param['store_name'],            'area_id'=>$param['area_id'],            'area_info'=>$param['area_info'],            'store_address'=>$param['store_address'],            'store_label'=>empty($param['store_label'])?$param['store_old_label']:$param['store_label'],            'store_banner'=>empty($param['store_banner'])?$param['store_old_banner']:$param['store_banner'],            'store_logo'=>empty($param['store_logo'])?$param['store_old_logo']:$param['store_logo'],            'store_tel'=>$param['store_tel'],            'store_qq'=>$param['store_qq'],            'store_ww'=>$param['store_ww'],            'store_zy'=>$param['store_zy'],            'description'=>$param['description'],            'store_domain'=>$param['store_domain'],            'store_keywords'=>$param['seo_keywords'],            'store_description'=>$param['seo_description']        );        if (!empty($param['store_theme'])){            $tmp['store_theme'] = $param['store_theme'];        }        if (empty($tmp['store_domain'])) unset($tmp['store_domain']);        $where = " store_id = '". $param['store_id'] ."'";        $result = Db::update('store',$tmp,$where);        return $result;    }    public function shopStore($param,$field='*') {        if(empty($param)) {            return false;        }        $condition_str	= $this->getCondition($param);        $param	= array();        $param['table']	= 'store';        $param['where']	= $condition_str;        $param['field']	= $field;        $param['limit'] = 1;        $store_info	= Db::select($param);        return $store_info[0];    }    public function countStore($param){        $condition_str = $this->getCondition($param);        $array	= array();        $array['table']	= 'store';        $array['where'] = $condition_str;        $array['field'] = 'count(store_id)';        $goods_array	= Db::select($array);        return $goods_array[0][0];    }    private function getCondition($conditon_array){        $condition_sql = '';        if($conditon_array['gc_id_in'] != '') {            $condition_sql .= " and gc_id IN (".$conditon_array['gc_id_in'].")";        }        if($conditon_array['gc_parent_id'] != '') {            $condition_sql .= " and gc_parent_id = ".$conditon_array['gc_parent_id'];        }        if($conditon_array['store_recommend'] != '') {            $condition_sql	.= " and `store`.store_recommend = '{$conditon_array['store_recommend']}'";        }        if($conditon_array['store_state'] != '') {            $condition_sql	.= " and `store`.store_state = '{$conditon_array['store_state']}'";        }        if($conditon_array['friend_list'] != '') {            $condition_sql	.= " and `store`.member_name IN (".$conditon_array['friend_list'].")";        }        if($conditon_array['store_name'] != '') {            $condition_sql	.= " and `store`.store_name='".$conditon_array['store_name']."'";        }        if($conditon_array['store_id'] != '') {            $condition_sql	.= " and `store`.store_id='{$conditon_array['store_id']}'";        }        if($conditon_array['member_id'] != '') {            $condition_sql	.= " and `store`.member_id='{$conditon_array['member_id']}'";        }        if($conditon_array['store_id_in'] != ''){            $condition_sql	.= " and `store`.store_id in (".$conditon_array['store_id_in'].")";        }        if($conditon_array['like_owner_and_name'] != '') {            $condition_sql	.= " and member_name like '%".$conditon_array['like_owner_and_name']."%'";        }        if($conditon_array['like_store_name'] != '') {            $condition_sql	.= " and `store`.store_name like '%".$conditon_array['like_store_name']."%'";        }        if($conditon_array['grade_id'] != '') {            $condition_sql	.= " and `store`.grade_id='".$conditon_array['grade_id']."'";        }        if(isset($conditon_array['grade_id_in'])) {            if ($conditon_array['grade_id_in'] == ''){                $condition_sql	.= " and `store`.grade_id in ('')";            } else {                $condition_sql	.= " and `store`.grade_id in ({$conditon_array['grade_id_in']})";            }        }        if($conditon_array['area_id'] != '') {            $condition_sql	.= " and `store`.area_id = '".$conditon_array['area_id']."'";        }        if($conditon_array['in_area_id'] != '') {            $condition_sql	.= " and `store`.area_id in (".$conditon_array['in_area_id'].")";        }        if($conditon_array['sc_id'] != '') {            $condition_sql	.= " and `store`.sc_id = '".$conditon_array['sc_id']."'";        }        if(isset($conditon_array['sc_id_in'])) {            if ($conditon_array['sc_id_in'] == ''){                $condition_sql	.= " and `store`.sc_id in ('') ";            }else {                $condition_sql	.= " and `store`.sc_id in({$conditon_array['sc_id_in']})";            }        }        if($conditon_array['store_domain'] != '') {            $condition_sql	.= " and `store`.store_domain = '".$conditon_array['store_domain']."'";        }        if ($conditon_array['lt_store_end_time'] != ''){            $condition_sql	.= " and (`store`.store_end_time > 0 and `store`.store_end_time<'".$conditon_array['lt_store_end_time']."')";        }        if($conditon_array['like_store_domain'] != '') {            $condition_sql	.= " and `store`.store_domain like '%".$conditon_array['like_store_domain']."%'";        }        if($conditon_array['store_domain_not_null'] != '') {            $condition_sql	.= " and `store`.store_domain <> ''";        }        return $condition_sql;    }    public function getStoreList($condition,$page = '',$type = 'simple'){        $condition_str = $this->getCondition($condition);        $param = array();        $param['where'] = $condition_str;        switch ($type){        case 'store_class':            $param['table'] = 'store,store_class';            $param['join_type']= 'INNER JOIN';            $param['join_on']= array('store.sc_id = store_class.sc_id');            break;        default:            $param['table'] = 'store';            break;        }        $param['field'] = $condition['field'];        $param['order'] = $condition['order'] ? $condition['order'] : 'store.store_id desc';        $param['group'] = $condition['group'];        $param['limit'] = $condition['limit'];        $result = Db::select($param,$page);        return $result;    }    public function add($param){        if (empty($param)){            return false;        }        if (is_array($param)){            $tmp = array();            foreach ($param as $k => $v){                $tmp[$k] = $v;            }            $result = Db::insert('store',$tmp);            return $result;        }else {            return false;        }    }    public function storeUpdate($param){        if (empty($param)){            return false;        }        if (is_array($param)){            $tmp = array();            foreach ($param as $k => $v){                $tmp[$k] = $v;            }            $where = " store_id = '". $param['store_id'] ."'";            $result = Db::update('store',$tmp,$where);            return $result;        }else {            return false;        }    }    public function updateByCondtion($param,$condition){        if (empty($param)){            return false;        }        $condition_str = $this->getCondition($condition);        return Db::update('store',$param,$condition_str);    }    public function del($id){        if (intval($id) > 0){            $store_array = $this->shopStore(array('store_id'=>intval($id)));            @unlink(BasePath.DS.ATTACH_AUTH.DS.$store_array['store_image']);            @unlink(BasePath.DS.ATTACH_AUTH.DS.$store_array['store_image1']);            @unlink(BasePath.DS.ATTACH_STORE.DS.$store_array['store_label']);            @unlink(BasePath.DS.ATTACH_STORE.DS.$store_array['store_banner']);            @unlink(BasePath.DS.ATTACH_STORE.DS.$store_array['store_logo']);            if($store_array['store_code'] != 'default_qrcode.png')                @unlink(BasePath.DS.ATTACH_STORE.DS.$store_array['store_code']);            if($store_array['store_slide'] != ''){                foreach(explode(',', $store_array['store_slide']) as $val){                    @unlink(BasePath.DS.ATTACH_SLIDE.DS.$val);                }            }            $where = " store_id = '". intval($id) ."'";            $result = Db::delete('store',$where);            return $result;        }else {            return false;        }    }    public function getOne($id){        if (intval($id) > 0){            $param = array();            $param['table'] = 'store';            $param['field'] = 'store_id';            $param['value'] = intval($id);            $result = Db::getRow($param);            return $result;        }else {            return FALSE;        }    }    public function favorites_store_del($id){        if (intval($id) > 0){            $where = " fav_type='store' and fav_id = '".intval($id)."' ";           $result = Db::delete('favorites',$where);            return $result;        }else {            return false;        }    }    public function getOrderGoodsRank($goods_num,$id,$type='') {        $array		= array();        $array['table'] = 'goods';        $array['field']	= 'goods.goods_id,goods.store_id,goods.goods_name,goods.goods_store_price,goods.goods_image,goods.salenum,goods.goods_collect';        $array['where']	= ' where goods.goods_show = 1 and goods.store_id='.$id;        $array['order'] = ' salenum DESC';        if($type == 'collect'){            $array['order'] = ' goods_collect desc';        }else{            $array['order']	= ' salenum desc';        }        $array['limit'] = $goods_num;        $goods_rank		= Db::select($array);        return $goods_rank;    }    public function getRecommendStore($count = 3) {        $condition = array();        $condition['store_recommend'] = 1;        $condition['store_state'] = 1;        return $this->getCacheStore($count,'store',$condition,'store_id desc');    }    public function getFavoritesStore($count = 3) {        $condition = array();        $condition['store_collect'] = array('gt',0);        $condition['store_state'] = 1;        return $this->getCacheStore($count,'favorites_store',$condition,$order = 'store_collect desc');    }    public function getNewStore($count = 3) {        $condition = array();        $condition['store_state'] = 1;        return $this->getCacheStore($count,'new_store',$condition,'store_id desc');    }	public function getCacheStore($count = 3,$cache_name,$condition,$order) {        $list = F($cache_name,'','cache/index');        if (!$list){            $field = 'store_id,store_name,member_name,store_domain,store_credit,store_logo';            $list = $this->field($field)->where($condition)->order($order)->limit(5)->select();            if(!empty($list)) {                foreach ($list as $key=>$value) {                    $value['store_logo'] = getStoreLogo($value['store_logo']);                    $value['credit_arr'] = getCreditArr($value['store_credit']);                    $list[$key] = $value;                }                $list = $this->getGoodsCountByStoreArray($list);            }            F($cache_name,$list,'cache/index');        }        if(count($list) <= $count) {            return $list;        } else {            return array_slice($list,0,$count);        }    }    public function getGoodsCountByStoreArray($store_array) {        $store_array_new = array();        $model = Model();        $no_cache_store = '';        foreach ($store_array as $value) {            $goods_count = rcache($value['store_id'],'store_goods_count');            if($goods_count !== FALSE) {                $value['goods_count'] = $goods_count;            } else {                $no_cache_store .= $value['store_id'].',';                $value['goods_count'] = '0';            }            $store_array_new[$value['store_id']] = $value;        }        if(!empty($no_cache_store)) {            $no_cache_store = rtrim($no_cache_store,',');            $condition = array();            $condition['goods_show'] = '1';            $condition['store_id'] = array('in',$no_cache_store);            $goods_count_array = $model->table('goods')->field('store_id,count(*) as goods_count')->where($condition)->group('store_id')->select();            if (!empty($goods_count_array)){                foreach ($goods_count_array as $value){                    $store_array_new[$value['store_id']]['goods_count'] = $value['goods_count'];                    wcache($value['store_id'],$value['goods_count'],'store_goods_count');                }            }        }        return $store_array_new;    }    public function getStoreInfoBasic($list,$day = 0){        $list_new = array();        if (!empty($list) && is_array($list)){            foreach ($list as $key=>$value) {                if(!empty($value)) {                    $value['store_logo'] = getStoreLogo($value['store_logo']);                    $value['credit_arr'] = getCreditArr($value['store_credit']);                    $value['store_desccredit_rate'] = @round($value['store_desccredit']/5*100,2);                    $value['store_servicecredit_rate'] = @round($value['store_servicecredit']/5*100,2);                    $value['store_deliverycredit_rate'] = @round($value['store_deliverycredit']/5*100,2);                    if(!empty($value['store_presales'])) $value['store_presales'] = unserialize($value['store_presales']);                    if(!empty($value['store_aftersales'])) $value['store_aftersales'] = unserialize($value['store_aftersales']);                    $list_new[$value['store_id']] = $value;                    $list_new[$value['store_id']]['goods_count'] = 0;                }            }            if($day > 0) {                $store_id_string = implode(',',array_keys($list_new));                $condition = array();                $condition['goods_show'] = '1';                $condition['store_id'] = array('in',$store_id_string);                $condition['goods_add_time'] = array('gt',strtotime("-{$day} day"));                $model = Model();                $goods_count_array = $model->table('goods')->field('store_id,count(*) as goods_count')->where($condition)->group('store_id')->select();                if (!empty($goods_count_array)){                    foreach ($goods_count_array as $value){                            $list_new[$value['store_id']]['goods_count'] = $value['goods_count'];                    }                }            } else {                $list_new = $this->getGoodsCountByStoreArray($list_new);            }        }        return $list_new;    }    public function getStoreSearchList($store_array) {        $store_array_new = array();        if(!empty($store_array)){            $model = Model();            $no_cache_store = array();            foreach ($store_array as $value) {                $store_search_info = rcache($value['store_id'],'store_search_info');                if($store_search_info !== FALSE) {                    $store_array_new[$value['store_id']] = $store_search_info;                } else {                    $no_cache_store[$value['store_id']] = $value;                }            }            if(!empty($no_cache_store)) {                $no_cache_store = $this->getStoreInfoBasic($no_cache_store);                $no_cache_store = $this->getGoodsCountJq($no_cache_store);                $no_cache_store = $this->getGoodsListBySales($no_cache_store);                foreach ($no_cache_store as $value) {                    wcache($value['store_id'],$value,'store_search_info');                }                $store_array_new = array_merge($store_array_new,$no_cache_store);            }        }        return $store_array_new;    }    private function getGoodsCountJq($store_array) {        $model = Model();        $order_count_array = $model->table('order')->field('store_id,count(*) as order_count')->where(array('store_id'=>array('in',implode(',',array_keys($store_array))),'add_time'=>array('gt',TIMESTAMP-3600*24*90)))->group('store_id')->select();        foreach ((array)$order_count_array as $value) {            $store_array[$value['store_id']]['num_sales_jq'] = $value['order_count'];        }        return $store_array;    }    private function getGoodsListBySales($store_array) {        $model = Model();        $field = 'goods_id,store_id,goods_name,goods_image,goods_store_price,salenum';        foreach ($store_array as $value) {            $store_array[$value['store_id']]['search_list_goods'] = $model->table('goods')->field($field)->where(array('store_id'=>$value['store_id'],'goods_show'=>1))->order('salenum desc')->limit(8)->select();        }        return $store_array;    }    public function getStoreInfoDetail($store_info) {        $store_info_detail = rcache($store_info['store_id'],'store_detail_info');        if($store_info_detail === FALSE) {            $model = Model();            $store_info_detail_array = $this->getStoreInfoBasic(array($store_info));            $store_info_detail = $store_info_detail_array[$store_info['store_id']];            $store_grade_info = $model->table('store_grade')->where(array('sg_id'=>$store_info['grade_id']))->find();            $store_info_detail['grade_name'] = $store_grade_info['sg_name'];            $store_info_detail['grade_goodslimit'] = $store_grade_info['sg_goods_limit'];            $area_array	= array();            $area_array = explode("\t",$store_info["area_info"]);            $map_city	= Language::get('member_map_city');            $city	= '';            if(strpos($area_array[0], $map_city) !== false){                $city	= $area_array[0];            }else {                $city	= $area_array[1];            }            $store_info_detail['city'] = $city;            $map_info = $model->table('map')->where(array('store_id'=>$store_info['store_id'],'map_api'=>'baidu'))->order('map_id desc')->find();            $store_info_detail['map'] = array('point_lng'=>$map_info['point_lng'],'point_lat'=>$map_info['point_lat']);            $store_navigation_list = $model->table('store_navigation')->where(array('sn_store_id'=>$store_info['store_id'],'sn_if_show'=>1))->order('sn_sort')->select();            if (!empty($store_navigation_list)){                foreach ($store_navigation_list as $k=>$v){                    unset($v['sn_content']);                    $store_info_detail['nav'][] = $v;                }            }            $hot_sales	= $this->getOrderGoodsRank(5,$store_info['store_id']);            $store_info_detail['hot_sales'] = $hot_sales;            $hot_collect	= $this->getOrderGoodsRank(5,$store_info['store_id'],'collect');            $store_info_detail['hot_collect'] = $hot_collect;            $goodsclass_model = Model('my_goods_class');            $goods_class_list = $goodsclass_model->getShowTreeList($store_info['store_id']);            $store_info_detail['goods_class_list'] = $goods_class_list;            wcache($store_info['store_id'],$store_info_detail,'store_detail_info');        }        return $store_info_detail;    }	public function create_order_itemOp($data,$n='0')	{		$MessageID = '880022'.time().rand(000,9999);		$companyID = MD5(time().rand(000,9999));		if(!empty($row))		{			$item = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n";			$item.="<Manifest>";			 $item.=" <Head>";				$item.="<MessageID>".$MessageID."</MessageID>";				$item.="<MessageType>880022</MessageType>";				$item.="<SenderID>".$companyID."</SenderID>";				$item.="<SendTime>".date('Y-m-d H:i:s',time())."</SendTime>";				$item.="<Version>1.0</Version>";			  $item.="</Head>";			$item.="  <Declaration>";				$item.="<EOrder>";					$item.="<OrderId>".$data['order_info']['order_sn']."</OrderId>";					$item.="<IEFlag>进出口标识<IEFlag>";					$item.="<OrderStatus>S</OrderStatus>";					$item.="<EntRecordNo>".$data['order_info']['store_name']."</EntRecordNo>";					$item.="<EntRecordName>".$data['order_info']['store_name']."</EntRecordName>";					$item.="<OrderName>".$data['order_info']['true_name']."</OrderName>";					$item.="<OrderDocType>".$data['order_info']['idcard']."</OrderDocType>";					$item.="<OrderDocId>".$data['order_info']['out_sn']."</OrderDocId>";					$item.="<OrderPhone>".$data['order_info']['tel_phone']."</OrderPhone>";					$item.="<OrderGoodTotal>".$data['order_goods_list']['goods_amount']."</OrderGoodTotal>";					$item.="<OrderGoodTotalCurr>人民币</OrderGoodTotalCurr>";					$item.="<Freight>免运费</Freight>";					$item.="<FreightCurr>运费币制</FreightCurr>";					$item.="<Tax>0</Tax>";					$item.="<TaxCurr>税款币制</TaxCurr>";					$item.="<Note>备注</Note>";					$item.="<OrderDate>".$data['order_info']['add_time']."</OrderDate>";				$item.="</EOrder>";				$item.="<EOrderGoods>";				if(is_array($data['order_goods_list'][0]))				{					foreach($data['order_goods_list'] as $key=>$value)					{						$item.="<EOrderGood>";							$item.="<GNo>".++$key."</GNo>";							$item.="<ChildOrderNo>".$value['order_sn']."</ChildOrderNo>";							$item.="<StoreRecordNo>电商商户企业备案号</StoreRecordNo>";							$item.="<StoreRecordName>电商商户企业名称</StoreRecordName>";							$item.="<CopGNo>".$value['order_id']."</CopGNo>";  //该节点删除							$item.="<CustomsListNO >商品海关备案号</CustomsListNO > ";							$item.="<DecPrice>".$value['goods_price']."</DecPrice>";							$item.="<Unit>计量单位</Unit>";							$item.="<GQty>".$value['goods_num']."</GQty>";							$item.="<DeclTotal>商品总价</DeclTotal>";							$item.="<Notes>备注</Notes>";						$item.="</EOrderGood>";					}				}else				{						$item.="<EOrderGood>";							$item.="<GNo>".++$n."</GNo>";							$item.="<ChildOrderNo>".$data['order_goods_list']['order_sn']."</ChildOrderNo>";							$item.="<StoreRecordNo>电商商户企业备案号</StoreRecordNo>";							$item.="<StoreRecordName>电商商户企业名称</StoreRecordName>";							$item.="<CopGNo>".$data['order_goods_list']['order_id']."</CopGNo>";							$item.="<CustomsListNO >商品海关备案号</CustomsListNO > ";							$item.="<DecPrice>".$data['order_goods_list']['goods_price']."</DecPrice>";							$item.="<Unit>计量单位</Unit>";							$item.="<GQty>".$data['order_goods_list']['goods_num']."</GQty>";							$item.="<DeclTotal>商品总价</DeclTotal>";							$item.="<Notes>备注</Notes>";						$item.="</EOrderGood>";				}				$item.="</EOrderGoods>";			 $item.="</Declaration>";			$item.="</Manifest>";		}		return $item;	}    /**     * 获取店铺分类     */    public function getStoreClass($store_id,$lev=1)    {        $param['table'] = 'store';        $param['field']  = 'store_id';        $param['value'] = $store_id;        $row = Db::getRow($param,'*');        if (!empty($row['store_second_category']) && $lev==2) {            $class = $this->getClass(array('gc_id_in'=>$row['store_second_category']));            return $class;        }        if (!empty($row['store_top_category']) && $lev == 1) {            $class = $this->getClass(array('gc_id_in'=>$row['store_top_category']));            return $class;        }        return false;    }    //获取分类    public function getClass($param)    {        $where = $this->getCondition($param);        $data['table'] = 'goods_class';        $data['where'] = $where;        $data['file']  = '*';        return Db::select($data);    }}