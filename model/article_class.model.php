<?phpdefined('haipinlegou') or exit('Access Invalid!');class article_classModel{		public function getClassList($condition){		$condition_str = $this->_condition($condition);		$param = array();		$param['table'] = 'article_class';		$param['where'] = $condition_str;		$param['order']	= empty($condition['order'])?'ac_parent_id asc,ac_sort asc,ac_id asc':$condition['order'];		$result = Db::select($param);		return $result;	}			private function _condition($condition){		$condition_str = '';				if ($condition['ac_parent_id'] != ''){			$condition_str .= " and ac_parent_id = '". intval($condition['ac_parent_id']) ."'";		}		if ($condition['no_ac_id'] != ''){			$condition_str .= " and ac_id != '". intval($condition['no_ac_id']) ."'";		}		if ($condition['ac_name'] != ''){			$condition_str .= " and ac_name = '". $condition['ac_name'] ."'";		}		if ($condition['home_index'] != ''){			$condition_str .= " and ac_id <= 7";		}        if ($condition['is_show'] != ""){            $condition_str .=" and is_show = ".$condition["is_show"];        }				return $condition_str;	}			public function getOneClass($id){		if (intval($id) > 0){			$param = array();			$param['table'] = 'article_class';			$param['field'] = 'ac_id';			$param['value'] = intval($id);			$result = Db::getRow($param);			return $result;		}else {			return false;		}	}			public function add($param){		if (empty($param)){			return false;		}		if (is_array($param)){			$tmp = array();			foreach ($param as $k => $v){				$tmp[$k] = $v;			}			$result = Db::insert('article_class',$tmp);			return $result;		}else {			return false;		}	}			public function update($param){		if (empty($param)){			return false;		}		if (is_array($param)){			$tmp = array();			foreach ($param as $k => $v){				$tmp[$k] = $v;			}			$where = " ac_id = '". $param['ac_id'] ."'";			$result = Db::update('article_class',$tmp,$where);			return $result;		}else {			return false;		}	}			public function del($id){		if (intval($id) > 0){			$where = " ac_id = '". intval($id) ."'";			$result = Db::delete('article_class',$where);			return $result;		}else {			return false;		}	}		public function getTreeClassList($show_deep='2'){		$condition	= array();		$class_list = $this->getClassList($condition);		$show_deep = intval($show_deep);		$result = array();		if(is_array($class_list) && !empty($class_list)) {			$result = $this->_getTreeClassList($show_deep,$class_list);		}		return $result;	}		private function _getTreeClassList($show_deep,$class_list,$deep=1,$parent_id=0,$i=0){		static $show_class = array();		if(is_array($class_list) && !empty($class_list)) {			$size = count($class_list);			if($i == 0) $show_class = array();			for ($i;$i < $size;$i++) {				$val = $class_list[$i];				$ac_id = $val['ac_id'];				$ac_parent_id	= $val['ac_parent_id'];				if($ac_parent_id == $parent_id) {					$val['deep'] = $deep;					$show_class[] = $val;					if($deep < $show_deep && $deep < 2) {						$this->_getTreeClassList($show_deep,$class_list,$deep+1,$ac_id,$i+1);					}				}				if($ac_parent_id > $parent_id) break;			}		}		return $show_class;	}			public function getChildClass($parent_id){		$all_class = $this->getClassList(array('order'=>'ac_parent_id asc,ac_sort asc,ac_id asc'));		if (is_array($all_class)){			if (!is_array($parent_id)){				$parent_id = array($parent_id);			}			$result = array();			foreach ($all_class as $k => $v){				$ac_id	= $v['ac_id'];				$ac_parent_id	= $v['ac_parent_id'];				if (in_array($ac_id,$parent_id) || in_array($ac_parent_id,$parent_id)){					$result[] = $v;				}			}			return $result;		}else {			return false;		}	}}