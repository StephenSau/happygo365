<?phpdefined('haipinlegou') or exit('Access Invalid!');class p_xianshi_goodsModel{    const TABLE_NAME = 'p_xianshi_goods';    const PK = 'xianshi_goods_id';		private function getCondition($condition){		$condition_str = '';        if (!empty($condition['xianshi_goods_id'])){            $condition_str .= " and xianshi_goods_id = '".$condition['xianshi_goods_id'] ."'";        }        if (!empty($condition['xianshi_id'])){            $condition_str .= " and xianshi_id = '".$condition['xianshi_id'] ."'";        }        if (!empty($condition['quota_id'])){            $condition_str .= " and quota_id = '".$condition['quota_id'] ."'";        }        if (!empty($condition['goods_id'])){            $condition_str .= " and goods_id = '".$condition['goods_id'] ."'";        }        if (!empty($condition['state'])){            $condition_str .= " and state = '".$condition['state'] ."'";        }		return $condition_str;	}		public function getList($condition,$page='',$field='*'){        $param = array() ;        $param['table'] = self::TABLE_NAME ;        $param['where'] = $this->getCondition($condition);        $param['order'] = $condition['order'] ? $condition['order']: ' state asc,'.self::PK.' desc';        $param['limit'] = $condition['limit'];        $param['field'] = $field;        return Db::select($param,$page);	}    /**     * @param $condition = []     * @param $type=string     * @return []|bool     */    public function getXianshiGoods($condition,$type='')    {       $param=[];        switch($type){           case 'union':                $param['table']=$condition['table'];                $param['where']=$condition['where'];                $param['field']=$condition['field'];                $param['join_type']=$condition['join_type'];                $param['join_on']=$condition['join_on'];               break;           default:               $param['table'] = self::TABLE_NAME ;               $param['where'] = $condition['where'];               $param['field'] = $condition['filed'];       }        return Db::select($param);    }	public function getOne($id){		if (intval($id) > 0){			$param = array();			$param['table'] = self::TABLE_NAME;			$param['field'] = self::PK;			$param['value'] = intval($id);			$result = Db::getRow($param);			return $result;		}else {			return false;		}	}		public function isExist($condition='') {        $param = array() ;        $param['table'] = self::TABLE_NAME ;        $param['where'] = $this->getCondition($condition);        $list = Db::select($param);        if(empty($list)) {            return false;        }        else {            return true;        }	}		public function save($param){			return Db::insert(self::TABLE_NAME,$param);		}			public function update($update_array, $where_array){		$where = $this->getCondition($where_array);		return Db::update(self::TABLE_NAME,$update_array,$where);        }			public function drop($param){		$where = $this->getCondition($param);		return Db::delete(self::TABLE_NAME, $where);	}       public function getCount($param) {                $list = $this->getList($param,'','count(*) as count');        return $list[0]['count'];    }	}