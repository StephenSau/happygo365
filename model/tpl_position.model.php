<?phpdefined('haipinlegou') or exit('Access Invalid!');class tpl_positionModel{		public function getBrandList($condition,$page=''){		$condition_str = $this->_condition($condition);		$param = array();		$param['table'] = 'brand';		$param['order'] = $condition['order'] ? $condition['order'] : 'brand_sort';		$param['where'] = $condition_str;		$param['field'] = $condition['field'];		$param['group'] = $condition['group'];		$param['limit'] = $condition['limit'];		$result = Db::select($param,$page);				return $result;	}			private function _condition($condition){		$condition_str = '';				if ($condition['brand_class'] != ''){			$condition_str .= " and brand_class = '". $condition['brand_class'] ."'";		}		if ($condition['brand_recommend'] != ''){			$condition_str .= " and brand_recommend = '". intval($condition['brand_recommend']) ."'";		}		if ($condition['no_brand_id'] != ''){			$condition_str .= " and brand_id != '". intval($condition['no_brand_id']) ."'";		}		if ($condition['brand_id'] != ''){			$condition_str .= " and brand_id = '". intval($condition['brand_id']) ."'";		}		if ($condition['no_in_brand_id'] != ''){			$condition_str .= " and brand_id NOT IN( ". $condition['no_in_brand_id'] ." )";		}		if ($condition['brand_name'] != ''){			$condition_str .= " and brand_name = '". $condition['brand_name'] ."'";		}		if ($condition['like_brand_name'] != ''){			$condition_str .= " and brand_name like '%". $condition['like_brand_name'] ."%'";		}		if ($condition['like_brand_class'] != ''){			$condition_str .= " and brand_class like '%". $condition['like_brand_class'] ."%'";		}		if ($condition['brand_apply'] != ''){			$condition_str .= " and brand_apply = '". $condition['brand_apply'] ."'";		}		if($condition['storeid_equal'] != '') {			$condition_str	.= " and store_id = '{$condition['storeid_equal']}'";		}		if($condition['store_id'] != ''){			$condition_str	.= " and store_id in(".$condition['store_id'].")";		}        if(isset($condition['position_parent_id'])) {            $condition_str .= " and position_parent_id = ".$condition['position_parent_id'];        }        if($condition["position_id"] != '') {            $condition_str .= " and position_id = ".$condition["position_id"];        }        if($condition["position_id_isset"] !="") {            $condition_str .=" and tpl_block.position_id >=1";        }        if(isset($condition["block_is_show"])) {            $condition_str .=" and tpl_block.block_is_show = ".$condition["block_is_show"];        }        if($condition["left_index"] !="") {            $condition_str .=" and tpl_position.left_index = '".$condition["left_index"]."'";        }        if($condition['is_show'] != "") {            $condition_str .=" and tpl_position.is_show = ".$condition['is_show'];        }		return $condition_str;	}			public function getOneBrand($brand_id){		if (intval($brand_id) > 0){			$param = array();			$param['table'] = 'brand';			$param['field'] = 'brand_id';			$param['value'] = intval($brand_id);			$result = Db::getRow($param);			return $result;		}else {			return false;		}	}			public function add($param){		if (empty($param)){			return false;		}		if (is_array($param)){			$tmp = array();			foreach ($param as $k => $v){				$tmp[$k] = $v;			}			$result = Db::insert('brand',$tmp);			return $result;		}else {			return false;		}	}			public function update($param){		if (empty($param)){			return false;		}		if (is_array($param)){			$tmp = array();			foreach ($param as $k => $v){				$tmp[$k] = $v;			}			$where = " brand_id = '". $param['brand_id'] ."'";			$result = Db::update('brand',$tmp,$where);			return $result;		}else {			return false;		}	}			public function del($id){		if (intval($id) > 0){			$where = " brand_id = '". intval($id) ."'";			$result = Db::delete('brand',$where);			return $result;		}else {			return false;		}	}    /**     * 添加模板     * @param array 插入参数     * @return bool     * @example     * @author hdh     */    public function addPosition($param)    {        if(!empty($param) && is_array($param)) {            foreach($param as $key=>$val) {                $tmp[$key] = $val;            }            return DB::insert('tpl_position',$tmp);        } else {            return false;        }    }    /**     * 获取模板列表     * @param array 获取条件     * @return array|bool     * @example     * @author hdh     */    public function getTplList($condition,$page='',$field = "*")    {        $condition_str = $this->_condition($condition);        $param = array();        $param['table'] = 'tpl_position';        $param['order'] = $condition['order'] ? $condition['order'] : 'position_id';        $param['where'] = $condition_str;        $param['field'] = $condition['field'] ? $condition['field'] : $field;        $param['group'] = $condition['group'];        return DB::select($param,$page);    }    /**     * 获取模块列表     */    public function getBlockList($condition,$page='',$field="*")    {        $condition_str = $this->_condition($condition);        $param['table'] = 'tpl_block';        $param['order'] = $condition['order'] ? $condition['order'] : 'block_id';        $param['where'] = $condition_str;        $param['field'] = $condition['field'] ? $condition['field'] : $field;        $param['group'] = $condition['group'];        return DB::select($param,$page);    }    public function blockAdd($param)    {        return Db::insert("tpl_block",$param);    }    public function blockEdit($param)    {        return Db::update("tpl_block",$param," block_id = ".$param['block_id']);    }    public function blockDel($param)    {        return Db::delete("tpl_block"," block_id = ".$param['block_id']);    }    /**     *获取模块信息     */    public function getTplData($condition)    {        $condition_str = $this->_condition($condition);        $param['table'] = 'tpl_block,tpl_position';        $param['field'] = "*";        $param['join_type'] = "LEFT JOIN";        $param['join_on'] = ["tpl_block.position_id = tpl_position.position_id"];        $param['where'] = $condition_str;        $param['order'] = $condition['order'] ? $condition['order'] : 'tpl_block.block_sort DESC';        $tplData = Db::select($param);        if(!empty($tplData) && is_array($tplData)) {            foreach($tplData as $key=>$val) {                $tmp[$val['right_index']][] = $val;            }        }        $tmp['home-first'] = $this->getGoodsBycate($tmp['home-first']);        $tmp['home-hot']   = $this->getGoodsByid($tmp['home-hot']);        $tmp['home-xianshi'] = $this->getGoodsByid($tmp['home-xianshi']);        $tmp['home-next'] = $this->getGoodsByid($tmp['home-next']);        $tmp['home-1F-g'] = $this->getGoodsByid($tmp['home-1F-g']);        $tmp['home-1F-2g'] = $this->getGoodsByid($tmp['home-1F-2g']);        $tmp['home-1F-3g'] = $this->getGoodsByid($tmp['home-1F-3g']);        $tmp['home-1F-4g'] = $this->getGoodsByid($tmp['home-1F-4g']);        $tmp['home-first-brand'] = $this->getBrandByid($tmp['home-first-brand']);        $tmp['home-2F-g'] = $this->getGoodsByid($tmp['home-2F-g']);        $tmp['home-2F-2g'] = $this->getGoodsByid($tmp['home-2F-2g']);        $tmp['home-2F-3g'] = $this->getGoodsByid($tmp['home-2F-3g']);        $tmp['home-2F-4g'] = $this->getGoodsByid($tmp['home-2F-4g']);        $tmp['home-second-brand'] = $this->getBrandByid($tmp['home-second-brand']);        //$this->findGc($tmp['home-first']);        return $tmp;    }    /**     * @param $param     * @return array     */    public function getMenu($condition)    {        $condition_str = $this->_condition($condition);        $param['table'] = 'tpl_block,tpl_position';        $param['field'] = "*";        $param['join_type'] = "LEFT JOIN";        $param['join_on'] = ["tpl_block.position_id = tpl_position.position_id"];        $param['where'] = $condition_str;        $param['order'] = $condition['order'] ? $condition['order'] : 'tpl_block.block_sort DESC';        $tplData = Db::select($param);        if(!empty($tplData) && is_array($tplData)) {            foreach($tplData as $key=>$val) {                $tmp[$val['right_index']][] = $val;            }            return $tmp;        } else {            return false;        }    }    //获取品牌信息    public function getBrandByid($param)    {        if(!empty($param) && is_array($param)) {            foreach ($param as $key=>$val) {                $data['table'] = 'brand';                $data['field'] = 'brand_id';                $data['value'] = $val['key_num'];                $row = DB::getRow($data);                $param[$key]['brand_info'] = $row;            }            return $param;        }    }    //获取goods信息    public function getGoodsByid($param)    {        if(!empty($param) && is_array($param)) {            foreach($param as $k3=>$v3) {                $data['table'] = 'goods';                $data['field'] = 'goods_id';                $data['value'] = $v3['key_num'];                $row = DB::getRow($data);                $param[$k3]['goods_info'] = $row;            }            return $param;        }    }    public function getGoodsByCate($param)    {        if(!empty($param) & is_array($param)) {            $model = Model('goods');            foreach($param as $k2=>$v2) {                $gc_id =  $this->findGc($v2);                $goods_list = $model->getGoods(['gc_id_id'=>$gc_id,'limit'=>10],'','','goods');                $param[$k2]['goods_list'] = $goods_list;            }        }        return $param;    }    public function findGc($param)    {            $modle = Model('goods_class');            $gc_id = '';            $class = $modle->getClassList(['gc_parent_id'=>$param['key_num']]);//var_dump($class);die;            if(!empty($class) && is_array($class)) {                foreach($class as $k1=>$v1){                    $fir[] = $v1['gc_id'];                }            }            $sec_class = $modle->getClassList(['gc_parent_id'=>$fir]);            $gc_id .= implode(',',array_column($sec_class,"gc_id"));            return $gc_id;    }}